//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 8/20/2017 5:24:19 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Reflection;
using System.Linq.Expressions;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata


#endregion

namespace TestdbModel
{

    #region TestdbEntities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TestdbEntities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new TestdbEntities object.
        /// </summary>
        public TestdbEntities() : 
                base(@"name=TestdbEntitiesConnectionString", "TestdbEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new TestdbEntities object using the connection string found in the 'TestdbEntities' section of the application configuration file.
        /// </summary>
        public TestdbEntities(string connectionString) : 
                base(connectionString, "TestdbEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new TestdbEntities object.
        /// </summary>
        public TestdbEntities(EntityConnection connection) : base(connection, "TestdbEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Test> Tests
        {
            get
            {
                if ((_Tests == null))
                {
                    _Tests = base.CreateObjectSet<Test>("Tests");
                }
                return _Tests;
            }
        }
        private ObjectSet<Test> _Tests;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Tests EntitySet.
        /// </summary>
        public void AddToTests(Test test)
        {
            base.AddObject("Tests", test);
        }

        #endregion
    }

    #endregion
}

namespace TestdbModel
{

    /// <summary>
    /// There are no comments for TestdbModel.Test in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="TestdbModel", Name="Test")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Test : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Test object.
        /// </summary>
        /// <param name="id">Initial value of Id.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="isOk">Initial value of IsOk.</param>
        public static Test CreateTest(int id, string name, byte isOk)
        {
            Test test = new Test();
            test.Id = id;
            test.Name = name;
            test.IsOk = isOk;
            return test;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int Id
        {
            get
            {
                int value = _Id;
                OnGetId(ref value);
                return value;
            }
            set
            {
                if (_Id != value)
                {
                  OnIdChanging(ref value);
                  ReportPropertyChanging("Id");
                  _Id = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Id");
                  OnIdChanged();
              }
            }
        }
        private int _Id;
        partial void OnGetId(ref int value);
        partial void OnIdChanging(ref int value);
        partial void OnIdChanged();
    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Name
        {
            get
            {
                string value = _Name;
                OnGetName(ref value);
                return value;
            }
            set
            {
                if (_Name != value)
                {
                  OnNameChanging(ref value);
                  ReportPropertyChanging("Name");
                  _Name = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Name");
                  OnNameChanged();
              }
            }
        }
        private string _Name;
        partial void OnGetName(ref string value);
        partial void OnNameChanging(ref string value);
        partial void OnNameChanged();
    
        /// <summary>
        /// There are no comments for IsOk in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual byte IsOk
        {
            get
            {
                byte value = _IsOk;
                OnGetIsOk(ref value);
                return value;
            }
            set
            {
                if (_IsOk != value)
                {
                  OnIsOkChanging(ref value);
                  ReportPropertyChanging("IsOk");
                  _IsOk = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IsOk");
                  OnIsOkChanged();
              }
            }
        }
        private byte _IsOk;
        partial void OnGetIsOk(ref byte value);
        partial void OnIsOkChanging(ref byte value);
        partial void OnIsOkChanged();

        #endregion
    }

}
